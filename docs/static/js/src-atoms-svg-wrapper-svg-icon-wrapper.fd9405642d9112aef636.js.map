{"version":3,"sources":["/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/icon/Icon.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/svg/base/SvgIcon.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/svg/icons/CopyPassword.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/svg/icons/Edit.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/svg/wrapper/SvgIconWrapper.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/svg/wrapper/SvgIconWrapper.mdx","/Users/agauvrit/Dashlane/Projects/ui-components/src/colors/index.ts","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/themes/helpers/themeHelper.ts","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/base/BaseButton.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/themes/helpers/ThemedButton.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/themes/light/ButtonLight.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/text/StyledText.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/utility/helpers.ts"],"names":["getSize","size","getColor","propName","props","animated","$light","Icon","styled","svg","attrs","viewBox","version","xmlns","disabled","SvgIcon","title","children","isAnimated","Array","from","find","child","type","isAnimatedSvg","CopyPassword","fillRule","clipRule","d","Edit","SvgIconWrapper","ButtonLight","variant","style","minWidth","padding","height","layoutProps","MDXLayout","MDXContent","components","mdxType","of","__position","__code","__scope","this","Playground","Props","display","justifyContent","flexDirection","isMDXComponent","$primary","colors","$secondary","$success","$danger","$warning","$info","$transparent","getThemeByVariant","background","text","border","bgPrimary","primary","bgSecondary","secondary","bgTertiary","tertiary","textPrimary","textSecondary","borderPrimary","borderSecondary","borderTertiary","color","hover","active","assertUnreachable","Button","button","large","theme","BaseButton","StyledText","ThemedButton","lightColors","fontFamily","css","span","_","Error"],"mappings":"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","file":"static/js/src-atoms-svg-wrapper-svg-icon-wrapper.49f98914.js","sourcesContent":["import styled from 'styled-components';\nimport { $light } from '@colors';\nimport { Props as IconProps } from '@atoms/svg/base/SvgIcon';\n\nexport type ColorProps = 'color' | 'hoverColor' | 'activeColor';\ninterface Props extends Omit<IconProps, 'title' | 'children'> {\n  animated?: boolean;\n}\n\nconst getSize = ({ size = 1.5 }) => `${size}em`;\nconst getColor = (propName: ColorProps) => (props: Props): string =>\n  props.animated ? 'none' : props[propName] || $light[700];\n\nconst Icon = styled.svg.attrs<Props>(({ viewBox }: Props) => ({\n  viewBox: viewBox || '0 0 20 20',\n  version: '1.1',\n  xmlns: 'http://www.w3.org/2000/svg'\n}))`\n  display: flex;\n  width: ${getSize};\n  height: ${getSize};\n  stroke-width: 0;\n  cursor: ${({ disabled }): string => (disabled ? 'not-allowed' : 'pointer')}\n  outline: none;\n  border-radius: 4px;\n  fill: ${getColor('color')};\n  opacity: ${({ disabled }): number => (disabled ? 0.5 : 1)}\n  transition: ${({ animated }): string =>\n    animated ? 'none' : 'all 0.1s ease-in'};\n  &:hover {\n    fill: ${getColor('hoverColor')};\n  }\n  &:active {\n    fill: ${getColor('activeColor')};\n  }\n`;\n\nexport default Icon;\n","import * as React from 'react';\nimport Icon from '@ions/icon/Icon';\n\nexport interface Props {\n  /**\n   * The svg content to display\n   */\n  children: React.ReactElement;\n  /**\n   * The icon title (displayed on svg hover)\n   */\n  title?: string;\n  /**\n   * The icon size\n   * @default 2em\n   */\n  size?: number;\n  /**\n   * A disabled state for the icon wrapper\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * The icon color\n   * @default #474747 (light700)\n   */\n  color?: string;\n  /**\n   * The icon color when hovered\n   * @default #474747 (light700)\n   */\n  hoverColor?: string;\n  /**\n   * The icon color when active\n   * @default #474747 (light700)\n   */\n  activeColor?: string;\n  /**\n   * Allows to redefine the coordinates of the SVG element.\n   * @default '0 0 20 20'\n   **/\n  viewBox?: string;\n}\n\nexport type IconProps = Pick<Props, Exclude<keyof Props, 'children' | 'title'>>; // Using this rather than Omit<Props, 'children'> because Docz is not able to understand the Omit syntax and to parse the props\n\nconst isAnimatedSvg = (children: React.ReactElement[]) =>\n  !!Array.from<React.ReactElement>(children).find(\n    child => child.type === 'animateTransform'\n  );\nconst SvgIcon: React.FunctionComponent<Props> = ({\n  title,\n  children,\n  ...props\n}: Props): JSX.Element => {\n  const isAnimated =\n    children.props && children.props.children\n      ? isAnimatedSvg(children.props.children)\n      : false;\n  return (\n    <Icon animated={isAnimated} {...props}>\n      {title ? <title>{title}</title> : null}\n      {children}\n    </Icon>\n  );\n};\n\nexport default SvgIcon;\n","import * as React from 'react';\nimport SvgIcon from '@atoms/svg/base/SvgIcon';\n\nconst CopyPassword: React.FunctionComponent<\n  import('../base/SvgIcon').IconProps\n> = (props: import('../base/SvgIcon').IconProps): JSX.Element => (\n  <SvgIcon title='Copy password' {...props}>\n    <React.Fragment>\n      <path\n        fillRule='evenodd'\n        clipRule='evenodd'\n        d='M3 2.5C3 2.22386 3.22386 2 3.5 2H5.5C5.77614 2 6 2.22386 6 2.5C6 2.77614 5.77614 3 5.5 3H4V3.5C4 3.77614 3.77614 4 3.5 4C3.22386 4 3 3.77614 3 3.5V2.5ZM7 2.5C7 2.22386 7.22386 2 7.5 2H9.5C9.77614 2 10 2.22386 10 2.5C10 2.77614 9.77614 3 9.5 3H7.5C7.22386 3 7 2.77614 7 2.5ZM11 2.5C11 2.22386 11.2239 2 11.5 2H13.5C13.7761 2 14 2.22386 14 2.5V3.5C14 3.77614 13.7761 4 13.5 4C13.2239 4 13 3.77614 13 3.5V3H11.5C11.2239 3 11 2.77614 11 2.5ZM3.5 5C3.77614 5 4 5.22386 4 5.5V7.5C4 7.77614 3.77614 8 3.5 8C3.22386 8 3 7.77614 3 7.5V5.5C3 5.22386 3.22386 5 3.5 5ZM3.5 9C3.77614 9 4 9.22386 4 9.5V11.5C4 11.7761 3.77614 12 3.5 12C3.22386 12 3 11.7761 3 11.5V9.5C3 9.22386 3.22386 9 3.5 9ZM3.5 13C3.77614 13 4 13.2239 4 13.5V14H4.5C4.77614 14 5 14.2239 5 14.5C5 14.7761 4.77614 15 4.5 15H3.5C3.22386 15 3 14.7761 3 14.5V13.5C3 13.2239 3.22386 13 3.5 13ZM6 17.5C6 17.7761 6.22386 18 6.5 18H16.5C16.7761 18 17 17.7761 17 17.5V5.5C17 5.22386 16.7761 5 16.5 5H6.5C6.22386 5 6 5.22386 6 5.5V17.5ZM11.9983 9.69124C11.9983 9.4151 11.7745 9.19124 11.4983 9.19124C11.2222 9.19124 10.9983 9.4151 10.9983 9.69124V11.0031L9.76482 10.6024C9.50219 10.517 9.22012 10.6608 9.1348 10.9234C9.04948 11.186 9.19322 11.4681 9.45585 11.5534L10.6899 11.9544L9.92073 13.0153C9.75863 13.2388 9.80846 13.5515 10.032 13.7136C10.2556 13.8756 10.5682 13.8258 10.7303 13.6023L11.4978 12.5438L12.2627 13.6017C12.4246 13.8255 12.7371 13.8757 12.9609 13.7139C13.1847 13.5521 13.2349 13.2396 13.0731 13.0158L12.306 11.9549L13.5439 11.5535C13.8066 11.4683 13.9505 11.1863 13.8653 10.9237C13.7801 10.661 13.4981 10.5171 13.2354 10.6023L11.9983 11.0035V9.69124ZM7 17H16V6H7V17Z'\n      />\n    </React.Fragment>\n  </SvgIcon>\n);\n\nexport default CopyPassword;\n","import * as React from 'react';\nimport SvgIcon from '@atoms/svg/base/SvgIcon';\n\nconst Edit: React.FunctionComponent<import('../base/SvgIcon').IconProps> = (\n  props: import('../base/SvgIcon').IconProps\n): JSX.Element => (\n  <SvgIcon title='Edit' {...props}>\n    <React.Fragment>\n      <path\n        fillRule='evenodd'\n        clipRule='evenodd'\n        d='M13.5213 4.42559C14.0888 3.85814 15.0086 3.85814 15.576 4.42559C16.1433 4.99291 16.1436 5.91285 15.5758 6.48145C15.3806 6.67684 15.3808 6.99342 15.5762 7.18856C15.7716 7.38369 16.0882 7.38349 16.2833 7.18811C17.2409 6.22933 17.2412 4.67657 16.2831 3.71848C15.3251 2.76051 13.7722 2.76051 12.8142 3.71848C12.619 3.91374 12.619 4.23032 12.8142 4.42559C13.0095 4.62085 13.3261 4.62085 13.5213 4.42559ZM12.1398 5.09965C12.0461 5.00588 11.9189 4.9532 11.7863 4.9532C11.6537 4.9532 11.5265 5.00588 11.4327 5.09965L3.8369 12.6955C3.76709 12.7653 3.71951 12.8542 3.70015 12.951L3.00971 16.4042C2.97694 16.5681 3.02825 16.7376 3.14646 16.8558C3.26468 16.974 3.43414 17.0253 3.59807 16.9925L7.05028 16.3021C7.14708 16.2827 7.23599 16.2351 7.3058 16.1653L14.9016 8.5685C15.0969 8.37323 15.0969 8.05667 14.9016 7.86141L12.1398 5.09965ZM4.13734 15.8649L4.65106 13.2955L11.7863 6.16031L13.841 8.21499L6.7057 15.3512L4.13734 15.8649Z'\n      />\n    </React.Fragment>\n  </SvgIcon>\n);\n\nexport default Edit;\n","import * as React from 'react';\nimport { ButtonLight } from '@ions/button/themes';\nimport { Props as SvgProps } from '@atoms/svg/base/SvgIcon';\n\ninterface Props {\n  /**\n   * The icon to wrap\n   */\n  children: React.ReactElement<SvgProps, 'svg'>;\n}\n\n// const IconWrapper = styled(ButtonLight)` // Unused currently due to styled-components tree-shaking issues.\n//   min-width: 0;\n//   padding: 6px;\n//   height: 100%;\n// `;\n\nconst SvgIconWrapper: React.FunctionComponent<Props> = ({\n  children,\n  ...props\n}: Props): JSX.Element => (\n  <ButtonLight\n    variant='text'\n    {...props}\n    style={{ minWidth: 0, padding: '6px', height: '100%' }}\n  >\n    {children}\n  </ButtonLight>\n);\n\nexport default SvgIconWrapper;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport SvgIconWrapper from './SvgIconWrapper';\nimport Edit from '../icons/Edit';\nimport CopyPassword from '../icons/CopyPassword';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"svgiconwrapper\"\n    }}>{`SvgIconWrapper`}</h1>\n    <p>{`This is a simple button wrapper for your svg icons`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={SvgIconWrapper} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h3>\n    <Playground __position={1} __code={'<SvgIconWrapper>\\n  <CopyPassword />\\n</SvgIconWrapper>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      SvgIconWrapper,\n      Edit,\n      CopyPassword\n    }} style={{\n      display: 'flex',\n      justifyContent: 'center'\n    }} mdxType=\"Playground\">\n  <SvgIconWrapper mdxType=\"SvgIconWrapper\">\n    <CopyPassword mdxType=\"CopyPassword\" />\n  </SvgIconWrapper>\n    </Playground>\n    <h3 {...{\n      \"id\": \"the-contained-svg-can-have-a-bigger-size\"\n    }}>{`The contained svg can have a bigger size`}</h3>\n    <Playground __position={2} __code={'<SvgIconWrapper>\\n  <Edit />\\n</SvgIconWrapper>\\n<SvgIconWrapper>\\n  <Edit size={3} />\\n</SvgIconWrapper>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      SvgIconWrapper,\n      Edit,\n      CopyPassword\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <SvgIconWrapper mdxType=\"SvgIconWrapper\">\n    <Edit mdxType=\"Edit\" />\n  </SvgIconWrapper>\n  <SvgIconWrapper mdxType=\"SvgIconWrapper\">\n    <Edit size={3} mdxType=\"Edit\" />\n  </SvgIconWrapper>\n    </Playground>\n    <h3 {...{\n      \"id\": \"as-in-the-example-below-for-a-disabled-behaviour-wrapper-should-be-disabled-and-icons-as-well\"\n    }}>{`As in the example below, for a disabled behaviour, wrapper should be disabled and icons as well`}</h3>\n    <Playground __position={3} __code={'<SvgIconWrapper disabled>\\n  <CopyPassword disabled />\\n</SvgIconWrapper>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      SvgIconWrapper,\n      Edit,\n      CopyPassword\n    }} style={{\n      display: 'flex',\n      justifyContent: 'center'\n    }} mdxType=\"Playground\">\n  <SvgIconWrapper disabled mdxType=\"SvgIconWrapper\">\n    <CopyPassword disabled mdxType=\"CopyPassword\" />\n  </SvgIconWrapper>\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import { BasicColor, ColorExclude } from '@typings/Color.d';\nimport * as colors from '@design-tokens/colors.json';\n\nexport const $primary: ColorExclude<'200' | '400'> = colors.primary;\n\nexport const $secondary: BasicColor = colors.secondary;\n\nexport const $success: BasicColor = colors.success;\n\nexport const $danger: BasicColor = colors.danger;\n\nexport const $warning: BasicColor = colors.warning;\n\nexport const $info: BasicColor = colors.info;\n\nexport const $light: ColorExclude<'800'> = colors.light;\n\nexport const $transparent = 'transparent';\n","import { DefaultTheme } from 'styled-components';\nimport { $transparent } from '@colors';\nimport { ButtonVariant } from '@atoms/button/types';\nimport { assertUnreachable } from '@utility/helpers';\nimport { ThemeColors } from '@ions/button/themes/helpers/ThemedButton';\n\nexport const getThemeByVariant = (\n  colors: ThemeColors,\n  variant: ButtonVariant = 'contained'\n): DefaultTheme => {\n  const { background, text, border } = colors;\n  const {\n    primary: bgPrimary,\n    secondary: bgSecondary,\n    tertiary: bgTertiary\n  } = background;\n  const { primary: textPrimary, secondary: textSecondary } = text;\n  const {\n    primary: borderPrimary,\n    secondary: borderSecondary,\n    tertiary: borderTertiary\n  } = border;\n\n  switch (variant) {\n    case 'text':\n      return {\n        background: $transparent,\n        color: textSecondary || textPrimary,\n        hover: {\n          border: borderSecondary,\n          background: $transparent\n        },\n        active: {\n          color: textPrimary,\n          background: bgPrimary\n        },\n        disabled: {\n          color: borderTertiary || bgTertiary\n        }\n      };\n    case 'contained':\n      return {\n        background: bgPrimary,\n        color: textPrimary,\n        hover: {\n          background: bgSecondary\n        },\n        active: {\n          border: borderPrimary,\n          background: bgSecondary\n        },\n        disabled: {\n          color: borderTertiary || textPrimary,\n          background: bgTertiary\n        }\n      };\n\n    default:\n      return assertUnreachable(variant);\n  }\n};\n","import * as React from 'react';\nimport styled, { DefaultTheme } from 'styled-components';\nimport { $light, $transparent } from '@colors';\nimport { StyledText } from '@ions/text/StyledText';\nimport { Props } from '@atoms/button/Button';\n\nexport type BaseButtonProps = Omit<Props, 'nature' | 'variant'>;\n\ntype Theme = {\n  [key in keyof DefaultTheme]: DefaultTheme[key];\n};\n\nexport interface BaseProps extends BaseButtonProps {\n  children?: React.ReactNode;\n  theme: Theme;\n}\n\nconst getActiveBackground = ({ theme }: BaseProps): string =>\n  theme.active.background;\nconst getActiveColor = ({ theme }: BaseProps): string =>\n  theme.active.color || theme.color;\nconst getActiveBorderColor = ({ theme }: BaseProps): string =>\n  theme.active.border || $transparent;\nconst getHoverBackground = ({ theme }: BaseProps): string =>\n  theme.hover.background;\nconst getHoverColor = ({ theme }: BaseProps): string => theme.color;\nconst getHoverBorderColor = ({ theme }: BaseProps): string =>\n  theme.hover.border || $transparent;\nconst getBgColor = ({ disabled, theme }: BaseProps) =>\n  disabled ? theme.disabled.background : theme.background;\nconst getColor = ({ disabled, theme }: BaseProps) =>\n  disabled ? theme.disabled.color : theme.color;\n\nconst Button = styled.button<BaseProps>`\n  height: ${({ large = false }) => (large ? '48px' : '32px')};\n  color: ${getColor || $light[100]};\n  background-color: ${getBgColor};\n  cursor: ${({ disabled }): string => (disabled ? 'not-allowed' : 'pointer')};\n  border: solid ${$transparent};\n  border-width: ${({ theme }) => (theme.active.border ? '2px' : '1px')};\n  border-radius: 4px;\n  line-height: 1.75;\n  padding: ${({ large = false }) => (large ? '0 24px' : '0 16px')};\n  min-width: 64px;\n  font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;\n  font-weight: 600;\n  font-size: ${({ large = false }) => (large ? '18px' : '16px')};\n  display: inline-flex;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  outline: 0;\n  &:hover {\n    color: ${getHoverColor};\n    border-color: ${getHoverBorderColor};\n    background-color: ${getHoverBackground};\n    transition: border-color 0.1s ease-in-out, background-color 0.1s ease-in-out;\n  }\n  &:active {\n    color: ${getActiveColor};\n    border-color: ${getActiveBorderColor};\n    background-color: ${getActiveBackground};\n    transition: color 0.1s ease-in-out, background-color 0.1s ease-in-out;\n  }\n\n  &:disabled {\n    span {\n      pointer-events: none;\n    }\n    &:hover {\n      border-color: ${$transparent};\n    }\n  }\n`;\n\nconst BaseButton: React.FunctionComponent<BaseProps> = ({\n  children,\n  ...props\n}: BaseProps) => (\n  <Button {...props}>\n    <StyledText large={props.large}>{children || 'Default'}</StyledText>\n  </Button>\n);\n\nexport default BaseButton;\n","import * as React from 'react';\nimport { Props as ButtonProps } from '@atoms/button/Button';\nimport { getThemeByVariant } from '@ions/button/themes/helpers/themeHelper';\nimport { BaseButton } from '@ions/index';\n\nexport interface ThemeColors {\n  background: {\n    primary: string;\n    secondary: string;\n    tertiary: string;\n  };\n  text: {\n    primary: string;\n    secondary?: string;\n  };\n  border: {\n    primary: string;\n    secondary: string;\n    tertiary?: string;\n  };\n}\n\nexport type ThemedButtonProps = Omit<ButtonProps, 'nature'>;\n\ninterface Props extends ThemedButtonProps {\n  colors: ThemeColors;\n}\n\nexport const ThemedButton = ({ colors, ...props }: Props) => {\n  const theme = getThemeByVariant(colors, props.variant);\n\n  return <BaseButton theme={theme} {...props} />;\n};\n","import * as React from 'react';\nimport { $light } from '@colors';\nimport {\n  ThemeColors,\n  ThemedButton,\n  ThemedButtonProps\n} from '@ions/button/themes/helpers/ThemedButton';\n\nconst lightColors: ThemeColors = {\n  background: {\n    primary: $light[300],\n    secondary: $light[400],\n    tertiary: $light[200]\n  },\n  text: {\n    primary: $light[700]\n  },\n  border: {\n    primary: $light[500],\n    secondary: $light[300],\n    tertiary: $light[600]\n  }\n};\n\nconst ButtonLight = (props: ThemedButtonProps) => (\n  <ThemedButton colors={lightColors} {...props} />\n);\n\nexport default ButtonLight;\n","import styled, { css } from 'styled-components';\n\ninterface TextProps {\n  large?: boolean;\n}\n\nexport const fontFamily = css`\n  font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;\n`;\nexport const StyledText = styled.span<TextProps>`\n  ${fontFamily}\n  font-weight: 500;\n  line-height: 1.125rem;\n  font-size: ${({ large }) => (large ? '1.125rem' : '1rem')};\n  display: flex;\n`;\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function assertUnreachable(_: never): never {\n  throw new Error('Unexpected value. Should have been never.');\n}\n"],"sourceRoot":""}