{"version":3,"sources":["/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/themes/danger/ButtonDanger.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/themes/secondary/ButtonSecondary.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/themes/dark/ButtonDark.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/themes/success/ButtonSuccess.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/button/Button.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/button/Button.mdx","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/icon/Icon.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/svg/base/SvgIcon.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/svg/icons/Loader.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/colors/index.ts","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/themes/helpers/themeHelper.ts","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/base/BaseButton.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/themes/helpers/ThemedButton.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/button/themes/light/ButtonLight.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/text/StyledText.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/utility/helpers.ts"],"names":["dangerColors","background","primary","$danger","secondary","tertiary","text","$light","border","ButtonDanger","props","ThemedButton","colors","secondaryColors","$secondary","ButtonSecondary","darkColors","ButtonDark","successColors","$success","ButtonSuccess","Button","nature","ButtonLight","assertUnreachable","renderButtonByType","layoutProps","MDXLayout","MDXContent","components","mdxType","parentName","of","__position","__code","__scope","this","Playground","Props","Loader","style","display","flexDirection","justifyContent","variant","large","className","flexFlow","width","disabled","margin","isMDXComponent","getSize","size","getColor","propName","animated","Icon","styled","svg","attrs","viewBox","version","xmlns","SvgIcon","title","children","isAnimated","Array","from","find","child","type","isAnimatedSvg","opacity","fillRule","clipRule","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","attributeName","to","dur","repeatCount","$primary","$warning","$info","$transparent","getThemeByVariant","bgPrimary","bgSecondary","bgTertiary","textPrimary","textSecondary","borderPrimary","borderSecondary","borderTertiary","color","hover","active","button","theme","BaseButton","StyledText","lightColors","fontFamily","css","span","_","Error"],"mappings":"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","file":"static/js/src-atoms-button-button.080dcf76.js","sourcesContent":["import * as React from 'react';\nimport { $danger, $light } from '@colors';\nimport {\n  ThemeColors,\n  ThemedButton,\n  ThemedButtonProps\n} from '@ions/button/themes/helpers/ThemedButton';\n\nconst dangerColors: ThemeColors = {\n  background: {\n    primary: $danger[500],\n    secondary: $danger[700],\n    tertiary: $danger[300]\n  },\n  text: {\n    primary: $light[100],\n    secondary: $danger[500]\n  },\n  border: {\n    primary: $danger[900],\n    secondary: $danger[500]\n  }\n};\n\nconst ButtonDanger = (props: ThemedButtonProps) => (\n  <ThemedButton colors={dangerColors} {...props} />\n);\n\nexport default ButtonDanger;\n","import * as React from 'react';\nimport { $light, $secondary } from '@colors';\nimport {\n  ThemeColors,\n  ThemedButton,\n  ThemedButtonProps\n} from '@ions/button/themes/helpers/ThemedButton';\n\nconst secondaryColors: ThemeColors = {\n  background: {\n    primary: $secondary[500],\n    secondary: $secondary[700],\n    tertiary: $secondary[300]\n  },\n  text: {\n    primary: $light[100],\n    secondary: $secondary[500]\n  },\n  border: {\n    primary: $secondary[900],\n    secondary: $secondary[500]\n  }\n};\n\nconst ButtonSecondary = (props: ThemedButtonProps) => (\n  <ThemedButton colors={secondaryColors} {...props} />\n);\n\nexport default ButtonSecondary;\n","import * as React from 'react';\nimport { $light } from '@colors';\nimport {\n  ThemeColors,\n  ThemedButton,\n  ThemedButtonProps\n} from '@ions/button/themes/helpers/ThemedButton';\n\nconst darkColors: ThemeColors = {\n  background: {\n    primary: $light[400],\n    secondary: $light[500],\n    tertiary: $light[300]\n  },\n  text: {\n    primary: $light[700]\n  },\n  border: {\n    primary: $light[600],\n    secondary: $light[400],\n    tertiary: $light[600]\n  }\n};\n\nconst ButtonDark = (props: ThemedButtonProps) => (\n  <ThemedButton colors={darkColors} {...props} />\n);\n\nexport default ButtonDark;\n","import * as React from 'react';\nimport { $light, $success } from '@colors';\nimport {\n  ThemeColors,\n  ThemedButton,\n  ThemedButtonProps\n} from '@ions/button/themes/helpers/ThemedButton';\n\nconst successColors: ThemeColors = {\n  background: {\n    primary: $success[500],\n    secondary: $success[700],\n    tertiary: $success[300]\n  },\n  text: {\n    primary: $light[100],\n    secondary: $success[500]\n  },\n  border: {\n    primary: $success[900],\n    secondary: $success[500]\n  }\n};\n\nconst ButtonSuccess = (props: ThemedButtonProps) => (\n  <ThemedButton colors={successColors} {...props} />\n);\n\nexport default ButtonSuccess;\n","import * as React from 'react';\nimport {\n  ButtonDanger,\n  ButtonDark,\n  ButtonLight,\n  ButtonSecondary,\n  ButtonSuccess\n} from '@ions/button/themes';\nimport { assertUnreachable } from '@utility/helpers';\n\n// Downside: Docz will display all props including React.ButtonHTMLAttributes ones\n// https://github.com/doczjs/docz/issues/895\nexport interface Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The button's nature\n   */\n  nature: 'danger' | 'secondary' | 'dark' | 'light' | 'success';\n  /**\n   * Specifies if the button style should be with background (contained) or transparent (text)\n   * @default contained\n   */\n  variant?: 'contained' | 'text';\n  /**\n   * Disabled state of the button\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * A large style option\n   @default false\n   */\n  large?: boolean;\n}\n\nconst Button: React.FunctionComponent<Props> = (\n  props: Props\n): JSX.Element | null => {\n  const renderButtonByType = ({\n    nature,\n    ...props\n  }: Props): JSX.Element | null => {\n    switch (nature) {\n      case 'danger':\n        return <ButtonDanger {...props} />;\n      case 'secondary':\n        return <ButtonSecondary {...props} />;\n      case 'dark':\n        return <ButtonDark {...props} />;\n      case 'light':\n        return <ButtonLight {...props} />;\n      case 'success':\n        return <ButtonSuccess {...props} />;\n      default:\n        return assertUnreachable(nature);\n    }\n  };\n\n  return renderButtonByType(props);\n};\n\nexport default Button;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport Button from './Button';\nimport Loader from '../svg/icons/Loader';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"button\"\n    }}>{`Button`}</h1>\n    <p>{`A Button that allows users to take actions, and make choices, with a single tap. It can be a either:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Contained (filled) button`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Text button`}</inlineCode></li>\n    </ul>\n    <h4 {...{\n      \"id\": \"downside-since-button-props-extends-the-default-html-button-props-docz-will-display-all-props-including-reactbuttonhtmlattributes-ones-\"\n    }}>{`Downside: Since Button props extends the default html button props, Docz will display all props including `}<inlineCode parentName=\"h4\">{`React.ButtonHTMLAttributes`}</inlineCode>{` ones 😭`}</h4>\n    <p>{`Bug on repo link: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/doczjs/docz/issues/895\"\n      }}>{`https://github.com/doczjs/docz/issues/895`}</a></p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Button} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"default-variant-for-the-button-is-contained\"\n    }}>{`Default variant for the button is `}<inlineCode parentName=\"h3\">{`contained`}</inlineCode></h3>\n    <Playground __position={1} __code={'<div>\\n  <Button nature=\\\"danger\\\">Danger Button</Button>\\n</div>\\n<div>\\n  <Button nature=\\\"dark\\\">Dark Button</Button>\\n</div>\\n<div>\\n  <Button nature=\\\"light\\\">Light Button</Button>\\n</div>\\n<div>\\n  <Button nature=\\\"secondary\\\">Secondary Button</Button>\\n</div>\\n<div>\\n  <Button nature=\\\"success\\\">Success Button</Button>\\n</div>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Button,\n      Loader\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <div>\n    <Button nature=\"danger\" mdxType=\"Button\">Danger Button</Button>\n  </div>\n      <div>\n  <Button nature='dark' mdxType=\"Button\">Dark Button</Button>\n      </div>\n      <div>\n  <Button nature='light' mdxType=\"Button\">Light Button</Button>\n      </div>\n      <div>\n  <Button nature='secondary' mdxType=\"Button\">Secondary Button</Button>\n      </div>\n  <div>\n    <Button nature=\"success\" mdxType=\"Button\">Success Button</Button>\n  </div>\n    </Playground>\n    <h3 {...{\n      \"id\": \"you-can-have-a-text-button-by-specifying-variant-property-to-text\"\n    }}>{`You can have a text button by specifying `}<inlineCode parentName=\"h3\">{`variant`}</inlineCode>{` property to `}<inlineCode parentName=\"h3\">{`text`}</inlineCode></h3>\n    <Playground __position={2} __code={'<div>\\n  <Button nature=\\\"danger\\\" variant=\\\"text\\\">\\n    Danger Button\\n  </Button>\\n</div>\\n<div>\\n  <Button nature=\\\"dark\\\" variant=\\\"text\\\">\\n    Dark Button\\n  </Button>\\n</div>\\n<div>\\n  <Button nature=\\\"light\\\" variant=\\\"text\\\">\\n    Light Button\\n  </Button>\\n</div>\\n<div>\\n  <Button nature=\\\"secondary\\\" variant=\\\"text\\\">\\n    Secondary Button\\n  </Button>\\n</div>\\n<div>\\n  <Button nature=\\\"success\\\" variant=\\\"text\\\">\\n    Success Button\\n  </Button>\\n</div>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Button,\n      Loader\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <div>\n    <Button nature=\"danger\" variant=\"text\" mdxType=\"Button\">Danger Button</Button>\n  </div>\n      <div>\n  <Button nature='dark' variant='text' mdxType=\"Button\">\n    Dark Button\n  </Button>\n      </div>\n      <div>\n  <Button nature='light' variant='text' mdxType=\"Button\">\n    Light Button\n  </Button>\n      </div>\n      <div>\n  <Button nature='secondary' variant='text' mdxType=\"Button\">\n    Secondary Button\n  </Button>\n      </div>\n  <div>\n    <Button nature=\"success\" variant=\"text\" mdxType=\"Button\">Success Button</Button>\n  </div>\n    </Playground>\n    <h3 {...{\n      \"id\": \"buttons-either-contained-or-text-can-be-large-ones\"\n    }}>{`Buttons (either `}<inlineCode parentName=\"h3\">{`contained`}</inlineCode>{` or `}<inlineCode parentName=\"h3\">{`text`}</inlineCode>{`) can be `}<inlineCode parentName=\"h3\">{`large`}</inlineCode>{` ones`}</h3>\n    <Playground __position={3} __code={'<div>\\n  <Button nature=\\\"secondary\\\" variant=\\\"text\\\" large={true}>\\n    Label\\n  </Button>\\n</div>\\n<div>\\n  <Button nature=\\\"success\\\" large={true}>\\n    Label\\n  </Button>\\n</div>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Button,\n      Loader\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n      <div>\n  <Button nature='secondary' variant='text' large={true} mdxType=\"Button\">\n    Label\n  </Button>\n      </div>\n  <div>\n    <Button nature=\"success\" large={true} mdxType=\"Button\">Label</Button>\n  </div>\n    </Playground>\n    <h3 {...{\n      \"id\": \"in-disabled-mode-buttons-will-behave-as-following\"\n    }}>{`In disabled mode, buttons will behave as following`}</h3>\n    <Playground __position={4} __code={'<div\\n  style={{ display: \\'flex\\', justifyContent: \\'space-around\\', width: \\'100%\\' }}\\n>\\n  <div>\\n    <Button nature=\\\"danger\\\" disabled>\\n      Danger Button\\n    </Button>\\n  </div>\\n  <div>\\n    <Button nature=\\\"dark\\\" disabled>\\n      Dark Button\\n    </Button>\\n  </div>\\n  <div>\\n    <Button nature=\\\"light\\\" disabled>\\n      Light Button\\n    </Button>\\n  </div>\\n  <div>\\n    <Button nature=\\\"secondary\\\" disabled>\\n      Secondary Button\\n    </Button>\\n  </div>\\n  <div>\\n    <Button nature=\\\"success\\\" disabled>\\n      Success Button\\n    </Button>\\n  </div>\\n</div>\\n<div\\n  style={{\\n    display: \\'flex\\',\\n    justifyContent: \\'space-around\\',\\n    width: \\'100%\\',\\n    margin: \\'10px 0\\',\\n  }}\\n>\\n  <div>\\n    <Button nature=\\\"danger\\\" variant=\\\"text\\\" disabled>\\n      Danger Button\\n    </Button>\\n  </div>\\n  <div>\\n    <Button nature=\\\"dark\\\" variant=\\\"text\\\" disabled>\\n      Dark Button\\n    </Button>\\n  </div>\\n  <div>\\n    <Button nature=\\\"light\\\" variant=\\\"text\\\" disabled>\\n      Light Button\\n    </Button>\\n  </div>\\n  <div>\\n    <Button nature=\\\"secondary\\\" variant=\\\"text\\\" disabled>\\n      Secondary Button\\n    </Button>\\n  </div>\\n  <div>\\n    <Button nature=\\\"success\\\" variant=\\\"text\\\" disabled>\\n      Success Button\\n    </Button>\\n  </div>\\n</div>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Button,\n      Loader\n    }} className=\"test\" style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      flexFlow: 'wrap'\n    }} mdxType=\"Playground\">\n      <div style={{\n        display: 'flex',\n        justifyContent: 'space-around',\n        width: '100%'\n      }}>\n  <div>\n    <Button nature=\"danger\" disabled mdxType=\"Button\">Danger Button</Button>\n  </div>\n        <div>\n  <Button nature='dark' disabled mdxType=\"Button\">\n    Dark Button\n  </Button>\n        </div>\n        <div>\n  <Button nature='light' disabled mdxType=\"Button\">\n    Light Button\n  </Button>\n        </div>\n        <div>\n  <Button nature='secondary' disabled mdxType=\"Button\">\n    Secondary Button\n  </Button>\n        </div>\n  <div>\n    <Button nature=\"success\" disabled mdxType=\"Button\">Success Button</Button>\n  </div>\n      </div>\n      <div style={{\n        display: 'flex',\n        justifyContent: 'space-around',\n        width: '100%',\n        margin: '10px 0'\n      }}>\n  <div>\n    <Button nature=\"danger\" variant=\"text\" disabled mdxType=\"Button\">Danger Button</Button>\n  </div>\n        <div>\n  <Button nature='dark' variant='text' disabled mdxType=\"Button\">\n    Dark Button\n  </Button>\n        </div>\n        <div>\n  <Button nature='light' variant='text' disabled mdxType=\"Button\">\n    Light Button\n  </Button>\n        </div>\n        <div>\n  <Button nature='secondary' variant='text' disabled mdxType=\"Button\">\n    Secondary Button\n  </Button>\n        </div>\n        <div>\n  <Button nature=\"success\" variant=\"text\" disabled mdxType=\"Button\">Success Button</Button>\n  </div>\n      </div>\n    </Playground>\n    <h3 {...{\n      \"id\": \"a-button-can-contain-an-icon-as-well-in-the-example-below-we-are-setting-a-large-loading-button-in-this-way\"\n    }}>{`A Button can contain an icon as well. In the example below, we are setting a large loading button in this way:`}</h3>\n    <Playground __position={5} __code={'<Button nature=\\\"secondary\\\" style={{ width: \\'50%\\' }} large={true}>\\n  <Loader />\\n</Button>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Button,\n      Loader\n    }} style={{\n      display: 'flex',\n      width: '100%',\n      justifyContent: 'center'\n    }} mdxType=\"Playground\">\n  <Button nature='secondary' style={{\n        width: '50%'\n      }} large={true} mdxType=\"Button\">\n    <Loader mdxType=\"Loader\" />\n  </Button>\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import styled from 'styled-components';\nimport { $light } from '@colors';\nimport { Props as IconProps } from '@atoms/svg/base/SvgIcon';\n\nexport type ColorProps = 'color' | 'hoverColor' | 'activeColor';\ninterface Props extends Omit<IconProps, 'title' | 'children'> {\n  animated?: boolean;\n}\n\nconst getSize = ({ size = 1.5 }) => `${size}em`;\nconst getColor = (propName: ColorProps) => (props: Props): string =>\n  props.animated ? 'none' : props[propName] || $light[700];\n\nconst Icon = styled.svg.attrs<Props>(({ viewBox }: Props) => ({\n  viewBox: viewBox || '0 0 20 20',\n  version: '1.1',\n  xmlns: 'http://www.w3.org/2000/svg'\n}))`\n  display: flex;\n  width: ${getSize};\n  height: ${getSize};\n  stroke-width: 0;\n  cursor: ${({ disabled }): string => (disabled ? 'not-allowed' : 'pointer')}\n  outline: none;\n  border-radius: 4px;\n  fill: ${getColor('color')};\n  opacity: ${({ disabled }): number => (disabled ? 0.5 : 1)}\n  transition: ${({ animated }): string =>\n    animated ? 'none' : 'all 0.1s ease-in'};\n  &:hover {\n    fill: ${getColor('hoverColor')};\n  }\n  &:active {\n    fill: ${getColor('activeColor')};\n  }\n`;\n\nexport default Icon;\n","import * as React from 'react';\nimport Icon from '@ions/icon/Icon';\n\nexport interface Props {\n  /**\n   * The svg content to display\n   */\n  children: React.ReactElement;\n  /**\n   * The icon title (displayed on svg hover)\n   */\n  title?: string;\n  /**\n   * The icon size\n   * @default 2em\n   */\n  size?: number;\n  /**\n   * A disabled state for the icon wrapper\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * The icon color\n   * @default #474747 (light700)\n   */\n  color?: string;\n  /**\n   * The icon color when hovered\n   * @default #474747 (light700)\n   */\n  hoverColor?: string;\n  /**\n   * The icon color when active\n   * @default #474747 (light700)\n   */\n  activeColor?: string;\n  /**\n   * Allows to redefine the coordinates of the SVG element.\n   * @default '0 0 20 20'\n   **/\n  viewBox?: string;\n}\n\nexport type IconProps = Pick<Props, Exclude<keyof Props, 'children' | 'title'>>; // Using this rather than Omit<Props, 'children'> because Docz is not able to understand the Omit syntax and to parse the props\n\nconst isAnimatedSvg = (children: React.ReactElement[]) =>\n  !!Array.from<React.ReactElement>(children).find(\n    child => child.type === 'animateTransform'\n  );\nconst SvgIcon: React.FunctionComponent<Props> = ({\n  title,\n  children,\n  ...props\n}: Props): JSX.Element => {\n  const isAnimated =\n    children.props && children.props.children\n      ? isAnimatedSvg(children.props.children)\n      : false;\n  return (\n    <Icon animated={isAnimated} {...props}>\n      {title ? <title>{title}</title> : null}\n      {children}\n    </Icon>\n  );\n};\n\nexport default SvgIcon;\n","import * as React from 'react';\nimport SvgIcon from '@atoms/svg/base/SvgIcon';\n\nconst Loader: React.FunctionComponent<import('../base/SvgIcon').IconProps> = (\n  props: import('../base/SvgIcon').IconProps\n): JSX.Element => (\n  <SvgIcon title='Loader' {...props}>\n    <React.Fragment>\n      {' '}\n      <path\n        opacity='0.2'\n        fillRule='evenodd'\n        clipRule='evenodd'\n        d='M10 18C14.4183 18 18 14.4183 18 10C18 5.58172 14.4183 2 10 2C5.58172 2 2 5.58172 2 10C2 14.4183 5.58172 18 10 18Z'\n        stroke='#FFFFFF'\n        strokeWidth='2'\n        strokeLinecap='round'\n        strokeLinejoin='round'\n      />\n      <path\n        d='M10 18C14.4183 18 18 14.4183 18 10C18 5.58172 14.4183 2 10 2'\n        stroke='#FFFFFF'\n        strokeWidth='2'\n        strokeLinecap='round'\n        strokeLinejoin='round'\n      />\n      <animateTransform\n        attributeName='transform'\n        type='rotate'\n        from='0 0 0'\n        to='360 0 0'\n        dur='0.5s'\n        repeatCount='indefinite'\n      />\n    </React.Fragment>\n  </SvgIcon>\n);\n\nexport default Loader;\n","import { BasicColor, ColorExclude } from '@typings/Color.d';\nimport * as colors from '@design-tokens/colors.json';\n\nexport const $primary: ColorExclude<'200' | '400'> = colors.primary;\n\nexport const $secondary: BasicColor = colors.secondary;\n\nexport const $success: BasicColor = colors.success;\n\nexport const $danger: BasicColor = colors.danger;\n\nexport const $warning: BasicColor = colors.warning;\n\nexport const $info: BasicColor = colors.info;\n\nexport const $light: ColorExclude<'800'> = colors.light;\n\nexport const $transparent = 'transparent';\n","import { DefaultTheme } from 'styled-components';\nimport { $transparent } from '@colors';\nimport { ButtonVariant } from '@atoms/button/types';\nimport { assertUnreachable } from '@utility/helpers';\nimport { ThemeColors } from '@ions/button/themes/helpers/ThemedButton';\n\nexport const getThemeByVariant = (\n  colors: ThemeColors,\n  variant: ButtonVariant = 'contained'\n): DefaultTheme => {\n  const { background, text, border } = colors;\n  const {\n    primary: bgPrimary,\n    secondary: bgSecondary,\n    tertiary: bgTertiary\n  } = background;\n  const { primary: textPrimary, secondary: textSecondary } = text;\n  const {\n    primary: borderPrimary,\n    secondary: borderSecondary,\n    tertiary: borderTertiary\n  } = border;\n\n  switch (variant) {\n    case 'text':\n      return {\n        background: $transparent,\n        color: textSecondary || textPrimary,\n        hover: {\n          border: borderSecondary,\n          background: $transparent\n        },\n        active: {\n          color: textPrimary,\n          background: bgPrimary\n        },\n        disabled: {\n          color: borderTertiary || bgTertiary\n        }\n      };\n    case 'contained':\n      return {\n        background: bgPrimary,\n        color: textPrimary,\n        hover: {\n          background: bgSecondary\n        },\n        active: {\n          border: borderPrimary,\n          background: bgSecondary\n        },\n        disabled: {\n          color: borderTertiary || textPrimary,\n          background: bgTertiary\n        }\n      };\n\n    default:\n      return assertUnreachable(variant);\n  }\n};\n","import * as React from 'react';\nimport styled, { DefaultTheme } from 'styled-components';\nimport { $light, $transparent } from '@colors';\nimport { StyledText } from '@ions/text/StyledText';\nimport { Props } from '@atoms/button/Button';\n\nexport type BaseButtonProps = Omit<Props, 'nature' | 'variant'>;\n\ntype Theme = {\n  [key in keyof DefaultTheme]: DefaultTheme[key];\n};\n\nexport interface BaseProps extends BaseButtonProps {\n  children?: React.ReactNode;\n  theme: Theme;\n}\n\nconst getActiveBackground = ({ theme }: BaseProps): string =>\n  theme.active.background;\nconst getActiveColor = ({ theme }: BaseProps): string =>\n  theme.active.color || theme.color;\nconst getActiveBorderColor = ({ theme }: BaseProps): string =>\n  theme.active.border || $transparent;\nconst getHoverBackground = ({ theme }: BaseProps): string =>\n  theme.hover.background;\nconst getHoverColor = ({ theme }: BaseProps): string => theme.color;\nconst getHoverBorderColor = ({ theme }: BaseProps): string =>\n  theme.hover.border || $transparent;\nconst getBgColor = ({ disabled, theme }: BaseProps) =>\n  disabled ? theme.disabled.background : theme.background;\nconst getColor = ({ disabled, theme }: BaseProps) =>\n  disabled ? theme.disabled.color : theme.color;\n\nconst Button = styled.button<BaseProps>`\n  height: ${({ large = false }) => (large ? '48px' : '32px')};\n  color: ${getColor || $light[100]};\n  background-color: ${getBgColor};\n  cursor: ${({ disabled }): string => (disabled ? 'not-allowed' : 'pointer')};\n  border: solid ${$transparent};\n  border-width: ${({ theme }) => (theme.active.border ? '2px' : '1px')};\n  border-radius: 4px;\n  line-height: 1.75;\n  padding: ${({ large = false }) => (large ? '0 24px' : '0 16px')};\n  min-width: 64px;\n  font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;\n  font-weight: 600;\n  font-size: ${({ large = false }) => (large ? '18px' : '16px')};\n  display: inline-flex;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  outline: 0;\n  &:hover {\n    color: ${getHoverColor};\n    border-color: ${getHoverBorderColor};\n    background-color: ${getHoverBackground};\n    transition: border-color 0.1s ease-in-out, background-color 0.1s ease-in-out;\n  }\n  &:active {\n    color: ${getActiveColor};\n    border-color: ${getActiveBorderColor};\n    background-color: ${getActiveBackground};\n    transition: color 0.1s ease-in-out, background-color 0.1s ease-in-out;\n  }\n\n  &:disabled {\n    span {\n      pointer-events: none;\n    }\n    &:hover {\n      border-color: ${$transparent};\n    }\n  }\n`;\n\nconst BaseButton: React.FunctionComponent<BaseProps> = ({\n  children,\n  ...props\n}: BaseProps) => (\n  <Button {...props}>\n    <StyledText large={props.large}>{children || 'Default'}</StyledText>\n  </Button>\n);\n\nexport default BaseButton;\n","import * as React from 'react';\nimport { Props as ButtonProps } from '@atoms/button/Button';\nimport { getThemeByVariant } from '@ions/button/themes/helpers/themeHelper';\nimport { BaseButton } from '@ions/index';\n\nexport interface ThemeColors {\n  background: {\n    primary: string;\n    secondary: string;\n    tertiary: string;\n  };\n  text: {\n    primary: string;\n    secondary?: string;\n  };\n  border: {\n    primary: string;\n    secondary: string;\n    tertiary?: string;\n  };\n}\n\nexport type ThemedButtonProps = Omit<ButtonProps, 'nature'>;\n\ninterface Props extends ThemedButtonProps {\n  colors: ThemeColors;\n}\n\nexport const ThemedButton = ({ colors, ...props }: Props) => {\n  const theme = getThemeByVariant(colors, props.variant);\n\n  return <BaseButton theme={theme} {...props} />;\n};\n","import * as React from 'react';\nimport { $light } from '@colors';\nimport {\n  ThemeColors,\n  ThemedButton,\n  ThemedButtonProps\n} from '@ions/button/themes/helpers/ThemedButton';\n\nconst lightColors: ThemeColors = {\n  background: {\n    primary: $light[300],\n    secondary: $light[400],\n    tertiary: $light[200]\n  },\n  text: {\n    primary: $light[700]\n  },\n  border: {\n    primary: $light[500],\n    secondary: $light[300],\n    tertiary: $light[600]\n  }\n};\n\nconst ButtonLight = (props: ThemedButtonProps) => (\n  <ThemedButton colors={lightColors} {...props} />\n);\n\nexport default ButtonLight;\n","import styled, { css } from 'styled-components';\n\ninterface TextProps {\n  large?: boolean;\n}\n\nexport const fontFamily = css`\n  font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;\n`;\nexport const StyledText = styled.span<TextProps>`\n  ${fontFamily}\n  font-weight: 500;\n  line-height: 1.125rem;\n  font-size: ${({ large }) => (large ? '1.125rem' : '1rem')};\n  display: flex;\n`;\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function assertUnreachable(_: never): never {\n  throw new Error('Unexpected value. Should have been never.');\n}\n"],"sourceRoot":""}