{"version":3,"sources":["/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/svg/base/SvgIcon.mdx","/Users/agauvrit/Dashlane/Projects/ui-components/src/ions/icon/Icon.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/atoms/svg/base/SvgIcon.tsx","/Users/agauvrit/Dashlane/Projects/ui-components/src/colors/index.ts"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","of","SvgIcon","__position","__code","__scope","this","Playground","Props","style","display","justifyContent","viewBox","Fragment","d","flexDirection","hoverColor","activeColor","size","fillOpacity","color","disabled","isMDXComponent","getSize","getColor","propName","animated","$light","Icon","styled","svg","attrs","version","xmlns","title","children","isAnimated","Array","from","find","child","type","isAnimatedSvg","$primary","colors","$secondary","$success","$danger","$warning","$info","$transparent"],"mappings":"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","file":"static/js/src-atoms-svg-base-svg-icon.f02096fa.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport SvgIcon from './SvgIcon';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"svgicon\"\n    }}>{`SvgIcon`}</h1>\n    <p>{`Basic svg component that displays an icon based on its content (paths). You can use this component in order to display icons that are not available in UI-components icons set and that are specific to your project.`}</p>\n    <p>{`⚠️ Consider wrapping your path(s) in a `}<inlineCode parentName=\"p\">{`<React.Fragment>`}</inlineCode>{` element.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={SvgIcon} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h3>\n    <Playground __position={1} __code={'<SvgIcon viewBox=\\\"0 0 24 24\\\">\\n  <React.Fragment>\\n    <path d=\\\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm-.22-13h-.06c-.4 0-.72.32-.72.72v4.72c0 .35.18.68.49.86l4.15 2.49c.34.2.78.1.98-.24.21-.34.1-.79-.25-.99l-3.87-2.3V7.72c0-.4-.32-.72-.72-.72z\\\" />\\n  </React.Fragment>\\n</SvgIcon>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      SvgIcon\n    }} style={{\n      display: 'flex',\n      justifyContent: 'center'\n    }} mdxType=\"Playground\">\n  <SvgIcon viewBox='0 0 24 24' mdxType=\"SvgIcon\">\n    <React.Fragment>\n      <path d='M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm-.22-13h-.06c-.4 0-.72.32-.72.72v4.72c0 .35.18.68.49.86l4.15 2.49c.34.2.78.1.98-.24.21-.34.1-.79-.25-.99l-3.87-2.3V7.72c0-.4-.32-.72-.72-.72z' />\n    </React.Fragment>\n  </SvgIcon>\n    </Playground>\n    <h3 {...{\n      \"id\": \"we-can-customize-the-svgicon-by-specifying-a-color-andor-a-size\"\n    }}>{`We can customize the svgIcon by specifying a color and/or a size`}</h3>\n    <Playground __position={2} __code={'<SvgIcon\\n  hoverColor=\\\"hotpink\\\"\\n  activeColor=\\\"mediumvioletred\\\"\\n  size={2}\\n  viewBox=\\\"0 0 24 24\\\"\\n>\\n  <React.Fragment>\\n    <path\\n      fillOpacity=\\\".3\\\"\\n      d=\\\"M23.64 7c-.45-.34-4.93-4-11.64-4C5.28 3 .81 6.66.36 7l10.08 12.56c.8 1 2.32 1 3.12 0L23.64 7z\\\"\\n    ></path>\\n    <path d=\\\"M3.53 10.94l6.91 8.61c.8 1 2.32 1 3.12 0l6.91-8.61c-.43-.33-3.66-2.95-8.47-2.95s-8.04 2.62-8.47 2.95z\\\"></path>\\n  </React.Fragment>\\n</SvgIcon>\\n<SvgIcon\\n  color=\\\"cadetblue\\\"\\n  activeColor=\\\"red\\\"\\n  hoverColor=\\\"darkgoldenrod\\\"\\n  size={4}\\n  viewBox=\\\"0 0 24 24\\\"\\n>\\n  <React.Fragment>\\n    <path d=\\\"M21 11h-3.17l2.54-2.54c.39-.39.39-1.02 0-1.41-.39-.39-1.03-.39-1.42 0L15 11h-2V9l3.95-3.95c.39-.39.39-1.03 0-1.42a.9959.9959 0 00-1.41 0L13 6.17V3c0-.55-.45-1-1-1s-1 .45-1 1v3.17L8.46 3.63a.9959.9959 0 00-1.41 0c-.39.39-.39 1.03 0 1.42L11 9v2H9L5.05 7.05c-.39-.39-1.03-.39-1.42 0-.39.39-.39 1.02 0 1.41L6.17 11H3c-.55 0-1 .45-1 1s.45 1 1 1h3.17l-2.54 2.54c-.39.39-.39 1.02 0 1.41.39.39 1.03.39 1.42 0L9 13h2v2l-3.95 3.95c-.39.39-.39 1.03 0 1.42.39.39 1.02.39 1.41 0L11 17.83V21c0 .55.45 1 1 1s1-.45 1-1v-3.17l2.54 2.54c.39.39 1.02.39 1.41 0 .39-.39.39-1.03 0-1.42L13 15v-2h2l3.95 3.95c.39.39 1.03.39 1.42 0 .39-.39.39-1.02 0-1.41L17.83 13H21c.55 0 1-.45 1-1s-.45-1-1-1z\\\" />\\n  </React.Fragment>\\n</SvgIcon>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      SvgIcon\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }} mdxType=\"Playground\">\n  <SvgIcon hoverColor='hotpink' activeColor='mediumvioletred' size={2} viewBox='0 0 24 24' mdxType=\"SvgIcon\">\n    <React.Fragment>\n      <path fillOpacity='.3' d='M23.64 7c-.45-.34-4.93-4-11.64-4C5.28 3 .81 6.66.36 7l10.08 12.56c.8 1 2.32 1 3.12 0L23.64 7z'></path>\n      <path d='M3.53 10.94l6.91 8.61c.8 1 2.32 1 3.12 0l6.91-8.61c-.43-.33-3.66-2.95-8.47-2.95s-8.04 2.62-8.47 2.95z'></path>\n    </React.Fragment>\n  </SvgIcon>\n  <SvgIcon color='cadetblue' activeColor='red' hoverColor='darkgoldenrod' size={4} viewBox='0 0 24 24' mdxType=\"SvgIcon\">\n    <React.Fragment>\n      <path d='M21 11h-3.17l2.54-2.54c.39-.39.39-1.02 0-1.41-.39-.39-1.03-.39-1.42 0L15 11h-2V9l3.95-3.95c.39-.39.39-1.03 0-1.42a.9959.9959 0 00-1.41 0L13 6.17V3c0-.55-.45-1-1-1s-1 .45-1 1v3.17L8.46 3.63a.9959.9959 0 00-1.41 0c-.39.39-.39 1.03 0 1.42L11 9v2H9L5.05 7.05c-.39-.39-1.03-.39-1.42 0-.39.39-.39 1.02 0 1.41L6.17 11H3c-.55 0-1 .45-1 1s.45 1 1 1h3.17l-2.54 2.54c-.39.39-.39 1.02 0 1.41.39.39 1.03.39 1.42 0L9 13h2v2l-3.95 3.95c-.39.39-.39 1.03 0 1.42.39.39 1.02.39 1.41 0L11 17.83V21c0 .55.45 1 1 1s1-.45 1-1v-3.17l2.54 2.54c.39.39 1.02.39 1.41 0 .39-.39.39-1.03 0-1.42L13 15v-2h2l3.95 3.95c.39.39 1.03.39 1.42 0 .39-.39.39-1.02 0-1.41L17.83 13H21c.55 0 1-.45 1-1s-.45-1-1-1z' />\n    </React.Fragment>\n  </SvgIcon>\n    </Playground>\n    <h3 {...{\n      \"id\": \"the-svgicon-can-be-disabled-in-case-of-we-dont-want-to-allow-actions-on-it\"\n    }}>{`The SvgIcon can be disabled in case of we don't want to allow actions on it`}</h3>\n    <Playground __position={3} __code={'<SvgIcon size={3} color=\\\"darkblue\\\" viewBox=\\\"0 0 24 24\\\" disabled>\\n  <React.Fragment>\\n    <path d=\\\"M21 14.58c0-.36-.19-.69-.49-.89L13 9V3.5c0-.83-.67-1.5-1.5-1.5S10 2.67 10 3.5V9l-7.51 4.69c-.3.19-.49.53-.49.89 0 .7.68 1.21 1.36 1L10 13.5V19l-1.8 1.35c-.13.09-.2.24-.2.4v.59c0 .33.32.57.64.48L11.5 21l2.86.82c.32.09.64-.15.64-.48v-.59c0-.16-.07-.31-.2-.4L13 19v-5.5l6.64 2.08c.68.21 1.36-.3 1.36-1z\\\" />\\n  </React.Fragment>\\n</SvgIcon>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      SvgIcon\n    }} style={{\n      display: 'flex',\n      justifyContent: 'center'\n    }} mdxType=\"Playground\">\n  <SvgIcon size={3} color='darkblue' viewBox='0 0 24 24' disabled mdxType=\"SvgIcon\">\n    <React.Fragment>\n      <path d='M21 14.58c0-.36-.19-.69-.49-.89L13 9V3.5c0-.83-.67-1.5-1.5-1.5S10 2.67 10 3.5V9l-7.51 4.69c-.3.19-.49.53-.49.89 0 .7.68 1.21 1.36 1L10 13.5V19l-1.8 1.35c-.13.09-.2.24-.2.4v.59c0 .33.32.57.64.48L11.5 21l2.86.82c.32.09.64-.15.64-.48v-.59c0-.16-.07-.31-.2-.4L13 19v-5.5l6.64 2.08c.68.21 1.36-.3 1.36-1z' />\n    </React.Fragment>\n  </SvgIcon>\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import styled from 'styled-components';\nimport { $light } from '@colors';\nimport { Props as IconProps } from '@atoms/svg/base/SvgIcon';\n\nexport type ColorProps = 'color' | 'hoverColor' | 'activeColor';\ninterface Props extends Omit<IconProps, 'title' | 'children'> {\n  animated?: boolean;\n}\n\nconst getSize = ({ size = 1.5 }) => `${size}em`;\nconst getColor = (propName: ColorProps) => (props: Props): string =>\n  props.animated ? 'none' : props[propName] || $light[700];\n\nconst Icon = styled.svg.attrs<Props>(({ viewBox }: Props) => ({\n  viewBox: viewBox || '0 0 20 20',\n  version: '1.1',\n  xmlns: 'http://www.w3.org/2000/svg'\n}))`\n  display: flex;\n  width: ${getSize};\n  height: ${getSize};\n  stroke-width: 0;\n  cursor: ${({ disabled }): string => (disabled ? 'not-allowed' : 'pointer')}\n  outline: none;\n  border-radius: 4px;\n  fill: ${getColor('color')};\n  opacity: ${({ disabled }): number => (disabled ? 0.5 : 1)}\n  transition: ${({ animated }): string =>\n    animated ? 'none' : 'all 0.1s ease-in'};\n  &:hover {\n    fill: ${getColor('hoverColor')};\n  }\n  &:active {\n    fill: ${getColor('activeColor')};\n  }\n`;\n\nexport default Icon;\n","import * as React from 'react';\nimport Icon from '@ions/icon/Icon';\n\nexport interface Props {\n  /**\n   * The svg content to display\n   */\n  children: React.ReactElement;\n  /**\n   * The icon title (displayed on svg hover)\n   */\n  title?: string;\n  /**\n   * The icon size\n   * @default 2em\n   */\n  size?: number;\n  /**\n   * A disabled state for the icon wrapper\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * The icon color\n   * @default #474747 (light700)\n   */\n  color?: string;\n  /**\n   * The icon color when hovered\n   * @default #474747 (light700)\n   */\n  hoverColor?: string;\n  /**\n   * The icon color when active\n   * @default #474747 (light700)\n   */\n  activeColor?: string;\n  /**\n   * Allows to redefine the coordinates of the SVG element.\n   * @default '0 0 20 20'\n   **/\n  viewBox?: string;\n}\n\nexport type IconProps = Pick<Props, Exclude<keyof Props, 'children' | 'title'>>; // Using this rather than Omit<Props, 'children'> because Docz is not able to understand the Omit syntax and to parse the props\n\nconst isAnimatedSvg = (children: React.ReactElement[]) =>\n  !!Array.from<React.ReactElement>(children).find(\n    child => child.type === 'animateTransform'\n  );\nconst SvgIcon: React.FunctionComponent<Props> = ({\n  title,\n  children,\n  ...props\n}: Props): JSX.Element => {\n  const isAnimated =\n    children.props && children.props.children\n      ? isAnimatedSvg(children.props.children)\n      : false;\n  return (\n    <Icon animated={isAnimated} {...props}>\n      {title ? <title>{title}</title> : null}\n      {children}\n    </Icon>\n  );\n};\n\nexport default SvgIcon;\n","import { BasicColor, ColorExclude } from '@typings/Color.d';\nimport * as colors from '@design-tokens/colors.json';\n\nexport const $primary: ColorExclude<'200' | '400'> = colors.primary;\n\nexport const $secondary: BasicColor = colors.secondary;\n\nexport const $success: BasicColor = colors.success;\n\nexport const $danger: BasicColor = colors.danger;\n\nexport const $warning: BasicColor = colors.warning;\n\nexport const $info: BasicColor = colors.info;\n\nexport const $light: ColorExclude<'800'> = colors.light;\n\nexport const $transparent = 'transparent';\n"],"sourceRoot":""}