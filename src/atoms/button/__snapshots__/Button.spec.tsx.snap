// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Button> Global render should render 1`] = `
<Button
  nature="danger"
>
  <ButtonDanger>
    <Component
      colors={
        Object {
          "background": Object {
            "primary": "#ff002d",
            "secondary": "#8b0018",
            "tertiary": "#ffe3dd",
          },
          "border": Object {
            "primary": undefined,
            "secondary": "#ff002d",
          },
          "text": Object {
            "primary": "#ffffff",
            "secondary": "#ff002d",
          },
        }
      }
    >
      <BaseButton
        theme={
          Object {
            "active": Object {
              "background": "#8b0018",
              "border": undefined,
            },
            "background": "#ff002d",
            "color": "#ffffff",
            "disabled": Object {
              "background": "#ffe3dd",
              "color": "#ffffff",
            },
            "hover": Object {
              "background": "#8b0018",
            },
          }
        }
      >
        <styled.button
          theme={
            Object {
              "active": Object {
                "background": "#8b0018",
                "border": undefined,
              },
              "background": "#ff002d",
              "color": "#ffffff",
              "disabled": Object {
                "background": "#ffe3dd",
                "color": "#ffffff",
              },
              "hover": Object {
                "background": "#8b0018",
              },
            }
          }
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": false,
                  "lastClassName": "GuLGd",
                  "rules": Array [
                    "
  height: ",
                    [Function],
                    ";
  color: ",
                    [Function],
                    ";
  background-color: ",
                    [Function],
                    ";
  cursor: ",
                    [Function],
                    ";
  border: solid ",
                    "transparent",
                    ";
  border-width: ",
                    [Function],
                    ";
  border-radius: 4px;
  line-height: 1.75;
  padding: ",
                    [Function],
                    ";
  min-width: 64px;
  font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;
  font-weight: 600;
  font-size: ",
                    [Function],
                    ";
  display: inline-flex;
  position: relative;
  align-items: center;
  justify-content: center;
  outline: 0;
  &:hover {
    color: ",
                    [Function],
                    ";
    border-color: ",
                    [Function],
                    ";
    background-color: ",
                    [Function],
                    ";
    transition: border-color 0.1s ease-in-out, background-color 0.1s ease-in-out;
  }
  &:active {
    color: ",
                    [Function],
                    ";
    border-color: ",
                    [Function],
                    ";
    background-color: ",
                    [Function],
                    ";
    transition: color 0.1s ease-in-out, background-color 0.1s ease-in-out;
  }

  &:disabled {
    span {
      pointer-events: none;
    }
    &:hover {
      border-color: ",
                    "transparent",
                    ";
    }
  }
",
                  ],
                },
                "displayName": "styled.button",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            theme={
              Object {
                "active": Object {
                  "background": "#8b0018",
                  "border": undefined,
                },
                "background": "#ff002d",
                "color": "#ffffff",
                "disabled": Object {
                  "background": "#ffe3dd",
                  "color": "#ffffff",
                },
                "hover": Object {
                  "background": "#8b0018",
                },
              }
            }
          >
            <button
              className="sc-htpNat GuLGd"
            >
              <styled.span>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bwzfXH",
                        "isStatic": false,
                        "lastClassName": "EpsXC",
                        "rules": Array [
                          "
  ",
                          "
  font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;
",
                          "
  font-weight: 500;
  line-height: 1.125rem;
  font-size: ",
                          [Function],
                          ";
  display: flex;
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bwzfXH",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <span
                    className="sc-bwzfXH EpsXC"
                  >
                    Default
                  </span>
                </StyledComponent>
              </styled.span>
            </button>
          </StyledComponent>
        </styled.button>
      </BaseButton>
    </Component>
  </ButtonDanger>
</Button>
`;
